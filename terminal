mkdir status-page-backend
cd status-page-backend
python -m venv venv

# Activate virtual environment
# On Windows:
# venv\Scripts\activate
# On Unix or MacOS:
source venv/bin/activate

# Install initial dependencies
pip install fastapi[all] sqlalchemy psycopg2-binary python-dotenv alembic pydantic-settings python-jose[cryptography] passlib[bcrypt] python-multipart websockets python-jose[cryptography] python-multipart httpx

# Create initial directory structure
mkdir app
mkdir app/core
mkdir app/models
mkdir app/db
mkdir app/api
mkdir app/api/v1
mkdir app/api/v1/endpoints
mkdir app/schemas 

alembic init alembic 

python -m app.main 

sudo apt update
sudo apt install postgresql postgresql-contrib 

brew install postgresql
brew services start postgresql 

# Connect to PostgreSQL as postgres user
psql -U postgres
# Enter the password you set during installation

# Then in PostgreSQL prompt:
CREATE USER admin WITH PASSWORD 'admin123';
CREATE DATABASE statuspage;
GRANT ALL PRIVILEGES ON DATABASE statuspage TO admin;
\q

# Make sure you're in your project directory and virtual environment is activated
cd status-page-backend
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Run the test
python main.py 

# On Ubuntu/Debian
sudo service postgresql status

# On macOS
brew services list

# On Windows
# Check Services app 

sudo -u postgres psql
# Then in PostgreSQL prompt:
\l  # List all databases to verify statuspage exists 

touch app/__init__.py
touch app/core/__init__.py
touch app/db/__init__.py 

python main.py 

pip install -e . 

mv app/main.py ./main.py  # On Unix/Linux
# OR on Windows:
move app\main.py .\main.py 

type nul > app/__init__.py
type nul > app/core/__init__.py
type nul > app/db/__init__.py 

cd C:\Users\roypr\pratyaksh\backend 

python main.py 

# On Windows:
set PYTHONPATH=C:\Users\roypr\pratyaksh\backend
# On Unix/Linux:
export PYTHONPATH=/path/to/your/backend 

# From the backend directory:
type nul > app\__init__.py
type nul > app\core\__init__.py
type nul > app\db\__init__.py 

# From the backend directory:
pip install -e . 

# Make sure you're in C:\Users\roypr\pratyaksh\backend
cd C:\Users\roypr\pratyaksh\backend
python main.py 

# On Windows
# Check if PostgreSQL is installed
psql --version

# Check if the service is running
# Open Services app and look for "PostgreSQL" 

python main.py 

# On Windows
# Check if PostgreSQL is installed
psql --version

# Check if the service is running
# Open Services app and look for "PostgreSQL" 

"C:\Program Files\PostgreSQL\16\bin\psql.exe" -U admin -d statuspage -h localhost
# Enter password: admin123 

alembic revision --autogenerate -m "Create organization and user tables" 

alembic upgrade head 

alembic revision --autogenerate -m "Add service and incident models" 

alembic revision --autogenerate -m "Add incident update model" 

alembic upgrade head 

mkdir app/api
mkdir app/api/v1
mkdir app/api/v1/endpoints
mkdir app/schemas 

uvicorn app.main:app --reload 

alembic revision --autogenerate -m "Add incidents relationship to organization" 

alembic upgrade head 

# Delete all files in versions folder (but keep the folder)
del alembic\versions\*.py

# Connect to PostgreSQL
"C:\Program Files\PostgreSQL\16\bin\psql.exe" -U admin -d postgres -h localhost
# Enter password: admin123

# In psql:
DROP DATABASE IF EXISTS statuspage;
CREATE DATABASE statuspage;
\q

# Delete existing migrations
del alembic\versions\*.py

# Create new initial migration
alembic revision --autogenerate -m "Initial migration with all tables"

# Apply migration
alembic upgrade head

"C:\Program Files\PostgreSQL\16\bin\psql.exe" -U admin -d postgres -h localhost
# Enter password: admin123

# In psql prompt:
\dt  # This will list all tables 

# First, drop the existing database
"C:\Program Files\PostgreSQL\16\bin\psql.exe" -U admin -d postgres -h localhost
# Enter password: admin123

# In psql prompt:
DROP DATABASE statuspage;
CREATE DATABASE statuspage;
\q 

# Make sure you're in your project directory
cd C:\Users\roypr\pratyaksh\backend

# Delete any existing migration files
del alembic\versions\*.py

# Create a new migration
alembic revision --autogenerate -m "Initial migration"

# Apply migration
alembic upgrade head 

# 1. Connect to PostgreSQL and recreate database
"C:\Program Files\PostgreSQL\16\bin\psql.exe" -U admin -d postgres -h localhost
# In psql:
DROP DATABASE IF EXISTS statuspage;
CREATE DATABASE statuspage;
\q

# 2. Delete existing migrations
del alembic\versions\*.py

# 3. Create new migration
alembic revision --autogenerate -m "Initial migration"

# 4. Apply migration
alembic upgrade head

# 5. Verify tables
"C:\Program Files\PostgreSQL\16\bin\psql.exe" -U admin -d statuspage -h localhost
# In psql:
\dt 

# Delete alembic directory
rmdir /s /q alembic
del alembic.ini 

# 1. Delete existing alembic setup
rmdir /s /q alembic
del alembic.ini

# 2. Reinitialize alembic
alembic init alembic

# 3. Update alembic.ini and alembic/env.py as shown above

# 4. Recreate database
"C:\Program Files\PostgreSQL\16\bin\psql.exe" -U admin -d postgres -h localhost
# In psql:
DROP DATABASE IF EXISTS statuspage;
CREATE DATABASE statuspage;
\q

# 5. Create and apply migration
alembic revision --autogenerate -m "Initial migration"
alembic upgrade head

# 6. Verify
"C:\Program Files\PostgreSQL\16\bin\psql.exe" -U admin -d statuspage -h localhost
# In psql:
\dt 

alembic revision --autogenerate -m "Create all tables" 

alembic upgrade head 

# 1. Create versions directory
mkdir alembic\versions

# 2. Delete existing alembic setup and start fresh
rmdir /s /q alembic
del alembic.ini

# 3. Initialize alembic again
alembic init alembic

# 4. Create versions directory (it might have been created by init)
mkdir alembic\versions 2>nul

# 5. Update alembic.ini with correct database URL
echo sqlalchemy.url = postgresql://admin:admin123@localhost/statuspage > alembic.ini

# 6. Recreate database
"C:\Program Files\PostgreSQL\16\bin\psql.exe" -U admin -d postgres -h localhost 

# 7. Create and apply migration
alembic revision --autogenerate -m "Create all tables"
alembic upgrade head

# 8. Verify
"C:\Program Files\PostgreSQL\16\bin\psql.exe" -U admin -d statuspage -h localhost 

# Delete existing alembic setup
rmdir /s /q alembic
del alembic.ini

# Initialize alembic again
alembic init alembic

# Copy the alembic.ini content from above
# Copy the env.py content from above

# Create and apply migration
alembic revision --autogenerate -m "Create all tables"
alembic upgrade head 

# Delete existing migrations
del alembic\versions\*.py

# Create new migration
alembic revision --autogenerate -m "Create all tables"

# Apply migration
alembic upgrade head 

pip install redis 

del app\core\cache.py
del app\core\decorators.py 

alembic revision --autogenerate -m "Add service status history"
alembic upgrade head 

del app\core\websocket.py
del app\api\v1\endpoints\websocket.py 

# Remove Auth0-related dependencies (no need to run this since they're shared with other features)
# pip uninstall python-jose[cryptography] python-multipart httpx 

del app\core\auth.py 

# Make sure you're in the project root directory
cd C:\Users\roypr\pratyaksh\backend

# Run uvicorn with auto-reload for development
uvicorn app.main:app --reload --port 8000 

# Delete unused files
del app\core\websocket.py      # Removed WebSocket implementation
del app\core\security.py       # Not implemented
del app\core\logging.py        # Not implemented
del app\core\decorators.py     # Removed with caching
del app\core\constants.py      # Not used
del app\core\cache.py         # Removed caching
del app\core\auth.py          # Removed Auth0

# Navigate back to backend directory
cd C:\Users\roypr\pratyaksh\backend

# Remove the problematic frontend directory
rmdir /s /q status-page-frontend

# Create a new React project with TypeScript template (without version specification)
npx create-react-app status-page-frontend --template typescript

# Navigate to frontend directory
cd status-page-frontend

# Install dependencies with specific versions
npm install --save --legacy-peer-deps react@18.2.0 react-dom@18.2.0
npm install --save-dev --legacy-peer-deps @types/react@18.2.0 @types/react-dom@18.2.0

# Install additional dependencies
npm install --save --legacy-peer-deps axios@latest @tanstack/react-query@latest

# Install Tailwind CSS and its dependencies
npm install -D tailwindcss@latest postcss@latest autoprefixer@latest

# Initialize Tailwind CSS
npx tailwindcss init -p

# Make sure you're in the frontend directory
cd C:\Users\roypr\pratyaksh\backend\status-page-frontend

# Install React and its types
npm install react@18.2.0 react-dom@18.2.0 @types/react@18.2.0 @types/react-dom@18.2.0

# Install React Query
npm install @tanstack/react-query

# Install web-vitals (without @types as it's not needed)
npm install web-vitals

# Install axios
npm install axios

# Start the development server
npm start

# Remove unused core files
del app\core\websocket.py
del app\core\security.py
del app\core\logging.py
del app\core\decorators.py
del app\core\constants.py
del app\core\cache.py
del app\core\auth.py

# Remove unused API files
del app\api\v1\endpoints\websocket.py